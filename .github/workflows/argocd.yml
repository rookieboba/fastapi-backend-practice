#.github/workflows/argocd.yml
name: CI/CD to ArgoCD  # GitHub Actions 워크플로우 이름

permissions:
  contents: write  # git push를 위한 권한 설정

on:
  push:
    branches:
      - main  # main 브랜치에 push 이벤트 발생 시 워크플로우 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # GitHub Actions에서 제공하는 최신 Ubuntu Runner 사용
    environment: production

    steps:
    - name: Checkout code  #  코드 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 전체 git 기록 유지 (커밋 SHA 활용 목적)

    - name: Log in to Docker Hub  # DockerHub 인증
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image  #  Docker 이미지 빌드 & 푸시
      run: |
        IMAGE=terrnabin/fastapi_app
        TAG=${{ github.sha }}  # 커밋 해시를 이미지 태그로 사용
        docker build --build-arg VERSION=$TAG -t $IMAGE:$TAG .
        docker push $IMAGE:$TAG

    - name: Bump image in K8s manifests  #  K8s YAML 이미지 태그 자동 변경
      run: |
        TAG=${{ github.sha }}
        # rollout YAML 내 컨테이너 이미지 경로 수정
        yq e -i ".spec.template.spec.containers[0].image = \"terrnabin/fastapi_app:$TAG\"" k8s/rollout/fastapi-rollout.yaml
        # git 설정 후 자동 커밋 & push (GitOps 방식)
        git config user.name  "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add k8s/rollout/fastapi-rollout.yaml
        git commit -m "ci: bump image to $TAG"
        git pull --rebase origin main
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#  이 부분은 퍼블릭 GitHub Actions에서 내부 클러스터 직접 접근을 시도함
# 외부에서 사설망 클러스터 접근은 현실적으로 매우 어렵고, 실무에서는 거의 하지 않음
#
#  (과거 시도) kubeconfig로 직접 접근하여 kubectl get nodes 확인하려는 목적
#    - name: Set up kubeconfig  #  `kubeconfig` base64 인코딩 → Secret 등록
#      run: |
#        mkdir -p $HOME/.kube
#        echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config
#      env:
#        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}

#    - name: Install kubectl
#      uses: azure/setup-kubectl@v3
#      with:
#        version: latest

#    - name: Verify Kubernetes connectivity  # `kubectl get nodes` 로 K8s 연결 검증
#      run: kubectl get nodes

#    - name: Download ArgoCD CLI  # ArgoCD CLI 다운로드 및 권한 부여
#      run: |
#        curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
#        chmod +x argocd
#        mv argocd /usr/local/bin/
# Github Action 은 퍼블릭 IP 를 꼭 써야 한다. -> 아니다 
# 사설망은 접근이 불가하다 -> 당연하다
#    - name: ArgoCD Login & Sync
#      env:
#        ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}  # ex) https://공인IP:10443
#        ARGOCD_TOKEN:  ${{ secrets.ARGOCD_TOKEN }}   #  ArgoCD CLI 토큰 기반 인증

#      run: |
#        set -e 
        
        # ArgoCD 서버에 로그인 (grpc-web 방식)
#        argocd login $ARGOCD_SERVER --auth-token $ARGOCD_TOKEN --grpc-web

        #  최신 YAML 상태로 앱 배포 동기화
#        argocd app sync fastapi-app --prune --refresh
        
        #  앱이 정상 상태가 될 때까지 대기
#        argocd app wait fastapi-app --health --timeout 120
